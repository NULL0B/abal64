<html><head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="generator" content="Prologue Sing Html Version 1.0a">
<meta name="version" content="*PRL@INFO*#11a003">
<link href="style.css" type="text/css" rel="stylesheet" media="screen">
<link href="style.css" type="text/css" rel="stylesheet" media="print">
<title>Sing Version 1.0a
</title>
</head><body>
<div align="center">
<table class="DOC">
<tr><th><h1 align="center">
Sing Version 1.0a
</h1>
<td><div align="center"><img src="singlogo.gif">
</div></table></div><p>
<a name="vform">

<p>
<div align="center">
<table class="DS">
<tr><th><h2 align="center">
accept form control
</h2>

<tr><td><p><div align="center"><img src="vform.gif" usemap="#accept_form_control" >
</div><p>
<tr><td>

<map name="accept_form_control">
<area type=rect href="#FormControl" coords="10,30,143,54">
<area type=rect href="#Accept" coords="10,420,160,450">
<area type=rect href="#Cancel" coords="310,420,460,450">
<area type=rect href="#FormType" coords="160,80,448,99">
<area type=rect href="#ProductionLanguage" coords="160,130,448,149">
<area type=rect href="#NationalLanguage" coords="160,180,450,199">
<area type=rect href="#International" coords="160,220,342,236">
<area type=rect href="#MultipleLanguage" coords="260,320,442,336">
<area type=rect href="#Program" coords="30,290,240,310">
<area type=rect href="#Overlay" coords="30,320,240,340">
<area type=rect href="#PopUp" coords="30,350,240,370">
<area type=rect href="#KeyEvents" coords="143,30,291,54">
<area type=rect href="#MouseEvents" coords="291,30,421,54">
</map>

<map name="KeyEvents">
<area type=rect href="#FormControl" coords="10,30,143,54">
<area type=rect href="#Accept" coords="10,420,160,450">
<area type=rect href="#Cancel" coords="310,420,460,450">
<area type=rect href="#KeyEvents" coords="143,30,291,54">
<area type=rect href="#Escape" coords="50,110,170,130">
<area type=rect href="#Enter" coords="270,110,360,130">
<area type=rect href="#PageUp" coords="270,190,380,210">
<area type=rect href="#PageDown" coords="50,190,180,210">
<area type=rect href="#Tabulation" coords="50,230,170,250">
<area type=rect href="#UpArrow" coords="50,150,170,170">
<area type=rect href="#DownArrow" coords="270,150,390,170">
<area type=rect href="#DefaultBreak" coords="270,230,400,250">
<area type=rect href="#WidgetTriggers" coords="270,330,420,350">
<area type=rect href="#MouseEvents" coords="291,30,421,54">
</map>

<map name="MouseEvents">
<area type=rect href="#FormControl" coords="10,30,143,54">
<area type=rect href="#Accept" coords="10,420,160,450">
<area type=rect href="#Cancel" coords="310,420,460,450">
<area type=rect href="#KeyEvents" coords="143,30,291,54">
<area type=rect href="#MouseEvents" coords="291,30,421,54">
<area type=rect href="#SendLeft" coords="40,100,200,120">
<area type=rect href="#SendMiddle" coords="40,130,180,150">
<area type=rect href="#SendRight" coords="40,160,210,180">
<area type=rect href="#SendDown" coords="40,230,220,250">
<area type=rect href="#SendUp" coords="40,270,200,290">
<area type=rect href="#SendWhileDown" coords="40,310,240,330">
<area type=rect href="#SendMove" coords="40,350,210,370">
</map>
This dialog box will be activated from the forms model editor
extension menu to this
effect allowing inspection
and eventual modification of the various visual forms model
production
parameters.



<p>
<ol><li>
<dl>
<dt class=type><a name="FormControl">
<b>FormControl
</b></a>
<dd class=data>This tab page presents the visual forms model general production parameters.
<p>The
parameters influence directly source production as described in each
individual case.


<p>

</dl>
<ul><li>
<dl>
<dt class=type><a name="Accept">
<b>Accept
</b></a>
<dd class=data>This push button should be actioned in order to save the current forms parameters
to
the current visual forms model prior to leaving the forms parameter dialog box.



<p>

</dl>
<li>
<dl>
<dt class=type><a name="Cancel">
<b>Cancel
</b></a>
<dd class=data>If this push button is pressed any modifications to the collection of forms 
parameters
will be discarded prior to exit from the forms parameters dialog box.


<p>

</dl>
<li>
<dl>
<dt class=type><a name="FormType">
<b>FormType
</b></a>
<dd class=data>This select control defines the production nature or application scenario of
the visual
forms model.
<p>In the current version of the visual design tool the choice is limited
to
either <b>dialog box</b> or <b>draft document</b>.<p>
The suplementary types <b>event
driven</b> and <b>high quality document</b>
being available in a future version of
the product.


<p>

</dl>
<li>
<dl>
<dt class=type><a name="ProductionLanguage">
<b>ProductionLanguage
</b></a>
<dd class=data>This select control allows the definition of the production language for the
visual
forms model.
<p>In the current version of the visual design tool the following production

languages are possible
<p>
<ol>
<li>Abal
<li>Abal++
<li>C
</ol>
<p>
each with their
own specificity and production orientations.


<p>

</dl>
<li>
<dl>
<dt class=type><a name="NationalLanguage">
<b>NationalLanguage
</b></a>
<dd class=data>This select control allows the national language that is used by the visual forms

model to be defined in order to be able to coo-operate fully with future 
national
language conversion tools.


<p>

</dl>
<li>
<dl>
<dt class=type><a name="International">
<b>International
</b></a>
<dd class=data>The check control allows management of multinationalisation
or internationalisation
of forms component payload 
messages, titles, textes and images and documentation.
When
this is checked multiple national language messages strings 
will be saved to the
resource file, otherwise only the current payload will
be saved.



<p>

</dl>
<li>
<dl>
<dt class=type><a name="MultipleLanguage">
<b>MultipleLanguage
</b></a>
<dd class=data>When this check control is active the multinational message management
will be generated
to the target source allowing national language to
be changed dynamiclly during program
execution.


<p>

</dl>
<li>
<dl>
<dt class=type><a name="Program">
<b>Program
</b></a>
<dd class=data>When this check control is active it indicates that the visual forms model will 
produce
a standalone program type production packaging.

<p>

</dl>
<li>
<dl>
<dt class=type><a name="Overlay">
<b>Overlay
</b></a>
<dd class=data>This check control when active works in conjuntion with the state of the 
preceeding
stand alone program check control according to the following table
<p>
<table>
<tr><th>Program<th>Subordinate<th>Description
<tr><td>clear<td>clear<td>Include
file package
<tr><td>clear<td>set<td>module file package
<tr><td>set<td>clear<td>program
file package
<tr><td>set<td>set<td>program overlay package
</table>
<p>


<p>

</dl>
<li>
<dl>
<dt class=type><a name="PopUp">
<b>PopUp
</b></a>
<dd class=data>When this check control is active the source production will generate
code for the
popup or screen saver mechanisms appropriate to the 
production language.


<p>

</dl>
</ul><li>
<dl>
<dt class=type><a name="KeyEvents">
<b>KeyEvents
</b></a>
<dd class=data>This tab page presents the various keyboard event controls for the visual forms
model.
<p>These
parameters influence the keyboard event section of the 
finite state switch mechanism
generated 
for event handling in the <b>OnFocus</b> method, or procedure, of the visual
form.
<p>


<p>

</dl>
<img src="vform2.gif" usemap="#KeyEvents" >
<ul><li>
<dl>
<dt class=type><a name="Escape">
<b>Escape
</b></a>
<dd class=data>When this check control is active source code will be generated allowing the 
escape
key to be used to cancel modifications prior to exit from the forms model.
<p>If the
check is clear then escape key handling source will be inhibited.


<p>

</dl>
<li>
<dl>
<dt class=type><a name="Enter">
<b>Enter
</b></a>
<dd class=data>If this check control is active then source will be generated allowing 
the enter
key event to confirm and transmit modified parameters prior to
exit from a dialog
box.
<p>If this check control is not active then the enter key event will cause the

forms focus to be passed sequentially to the next forms widget.


<p>

</dl>
<li>
<dl>
<dt class=type><a name="PageUp">
<b>PageUp
</b></a>
<dd class=data>When this check control is active source will be produced to handle focus passing
on
a tab page level in a reverse direction through the list of widget tab page 
components.
<p>Otherwise
this source production will be inhibited.


<p>

</dl>
<li>
<dl>
<dt class=type><a name="PageDown">
<b>PageDown
</b></a>
<dd class=data>When this check control is active source will be produced to handle focus passing
on
a tab page level in a forward direction through the list of widget tab page 
components.
<p>Otherwise
this source production will be inhibited.


<p>

</dl>
<li>
<dl>
<dt class=type><a name="Tabulation">
<b>Tabulation
</b></a>
<dd class=data>When this check control is active source will be produced to handle focus passing
in
a forward direction through the list of active widget components in response to the
tabulation
key.
<p>Otherwise this source production will be inhibited.


<p>

</dl>
<li>
<dl>
<dt class=type><a name="UpArrow">
<b>UpArrow
</b></a>
<dd class=data>When this check control is active source will be produced to handle focus passing
in
a reverse direction through the list of active widget components.
<p>Otherwise this
source production will be inhibited.


<p>

</dl>
<li>
<dl>
<dt class=type><a name="DownArrow">
<b>DownArrow
</b></a>
<dd class=data>When this check control is active source will be produced to handle focus passing
in
a forward direction through the list of active widget components in response to the
down
arrow key.
<p>Otherwise this source production will be inhibited.


<p>

</dl>
<li>
<dl>
<dt class=type><a name="DefaultBreak">
<b>DefaultBreak
</b></a>
<dd class=data>When this check control is active source will be produced allowing all unhandled 
keyboard
events to break out of the <b>OnFocus</b> event handling switch and to
return the
corrsponding keycode event as a result.
<p>Otherwise this source production will be
inhibited.


<p>

</dl>
<li>
<dl>
<dt class=type><a name="WidgetTriggers">
<b>WidgetTriggers
</b></a>
<dd class=data>When this check control is active source will be produced to handle Alt Key Events.
It
also enables the forms menu option for the calculation and distibution of  
active
widget component hotkey triggers.
<p>Otherwise this source production will be inhibited.


<p>

</dl>
</ul><li>
<dl>
<dt class=type><a name="MouseEvents">
<b>MouseEvents
</b></a>
<dd class=data>This tab page presents the various mouse or pointing device event controls.
<p>These
parameters influence the event reception and analysis source generated 
to the <b>OnEvent</b>
and <b>OnFocus</b> methods of the visual form.
<p>


<p>

</dl>
<img src="vform3.gif" usemap="#MouseEvents" >
<ul><li>
<dl>
<dt class=type><a name="SendLeft">
<b>SendLeft
</b></a>
<dd class=data>When this check control is active reception and analysis of mouse left button
events
is possible, otherwise left button events will be ignored.


<p>

</dl>
<li>
<dl>
<dt class=type><a name="SendMiddle">
<b>SendMiddle
</b></a>
<dd class=data>When this check control is active reception and analysis of mouse middle button
events
is possible, otherwise middle button events will be ignored.


<p>

</dl>
<li>
<dl>
<dt class=type><a name="SendRight">
<b>SendRight
</b></a>
<dd class=data>When this check control is active reception and analysis of mouse right button
events
is possible, otherwise right button events will be ignored.


<p>

</dl>
<li>
<dl>
<dt class=type><a name="SendDown">
<b>SendDown
</b></a>
<dd class=data>When this check control is active reception and analysis of mouse button press
events
is possible, otherwise button press events will be ignored.


<p>

</dl>
<li>
<dl>
<dt class=type><a name="SendUp">
<b>SendUp
</b></a>
<dd class=data>When this check control is active reception and analysis of mouse button release
events
is possible, otherwise button release events will be ignored.


<p>

</dl>
<li>
<dl>
<dt class=type><a name="SendWhileDown">
<b>SendWhileDown
</b></a>
<dd class=data>When this check control is active reception and analysis of mouse move while down
events
is possible, otherwise these mouse events will be ignored.


<p>

</dl>
<li>
<dl>
<dt class=type><a name="SendMove">
<b>SendMove
</b></a>
<dd class=data>When this check control is active reception and analysis of mouse move 
events is
possible, otherwise these mouse events will be ignored.


<p>

</dl>
</ul></ol>

</td>
</table></div><p>

<p><div align="center">
<table class="CRT">
<tr><th><h3 align="center">
Copyright (c) 2002 Prologue Software
</h3>
</table></div><p>
</body></html>
